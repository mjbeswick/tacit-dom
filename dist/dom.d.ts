import { type ReadonlySignal, type Signal } from './signals';
type EventHandler<T = Event> = (event: T) => void | boolean;
export type ElementChildren = (string | number | HTMLElement | null | undefined | false | 0 | '')[];
export type ElementProps = {
    className?: string | string[] | {
        [key: string]: any;
    } | (string | {
        [key: string]: any;
    })[];
    style?: string | {
        [key: string]: string | number | Signal<string | number> | ReadonlySignal<string | number>;
    } | Signal<string | {
        [key: string]: string | number | Signal<string | number> | ReadonlySignal<string | number>;
    }> | ReadonlySignal<string | {
        [key: string]: string | number | Signal<string | number> | ReadonlySignal<string | number>;
    }>;
    onClick?: EventHandler;
    onDoubleClick?: EventHandler;
    onMouseDown?: EventHandler;
    onMouseUp?: EventHandler;
    onMouseMove?: EventHandler;
    onMouseEnter?: EventHandler;
    onMouseLeave?: EventHandler;
    onMouseOver?: EventHandler;
    onMouseOut?: EventHandler;
    onWheel?: EventHandler<WheelEvent>;
    onKeyDown?: EventHandler<KeyboardEvent>;
    onKeyUp?: EventHandler<KeyboardEvent>;
    onKeyPress?: EventHandler<KeyboardEvent>;
    onChange?: EventHandler;
    onInput?: EventHandler;
    onSubmit?: EventHandler;
    onFocus?: EventHandler;
    onBlur?: EventHandler;
    onDrag?: EventHandler;
    onDragStart?: EventHandler;
    onDragEnd?: EventHandler;
    onDragEnter?: EventHandler;
    onDragLeave?: EventHandler;
    onDragOver?: EventHandler;
    onDrop?: EventHandler;
    onTouchStart?: EventHandler<TouchEvent>;
    onTouchMove?: EventHandler<TouchEvent>;
    onTouchEnd?: EventHandler<TouchEvent>;
    onScroll?: EventHandler;
    onResize?: EventHandler;
    onLoad?: EventHandler;
    onError?: EventHandler;
};
export type Component<P = {}> = (props?: P) => HTMLElement;
export type ComponentUtils = {
    signal: <T>(initialValue: T) => Signal<T>;
    computed: <T>(computeFn: () => T) => ReadonlySignal<T>;
    effect: (fn: () => void | (() => void), options?: {
        allowRecursion?: boolean;
    }) => void;
};
export type PostRenderCallback = (element: HTMLElement) => (() => void) | void;
export declare function component<P = {}>(renderFn: (props: P, utils: ComponentUtils) => HTMLElement, postRender?: PostRenderCallback): Component<P>;
export declare function div(...children: ElementChildren): HTMLElement;
export declare function div(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function button(props?: string | number | (ElementProps & {
    disabled?: boolean;
}), ...children: ElementChildren): HTMLButtonElement;
export declare function h1(...children: ElementChildren): HTMLHeadingElement;
export declare function h1(props: ElementProps, ...children: ElementChildren): HTMLHeadingElement;
export declare function h2(...children: ElementChildren): HTMLHeadingElement;
export declare function h2(props: ElementProps, ...children: ElementChildren): HTMLHeadingElement;
export declare function h3(...children: ElementChildren): HTMLHeadingElement;
export declare function h3(props: ElementProps, ...children: ElementChildren): HTMLHeadingElement;
export declare function input(props?: ElementProps & {
    type?: string;
    value?: string;
    placeholder?: string;
    required?: boolean;
    disabled?: boolean;
    readonly?: boolean;
    maxLength?: number;
    minLength?: number;
    pattern?: string;
    size?: number;
    accept?: string;
    multiple?: boolean;
    step?: number;
    min?: number;
    max?: number;
}, ...children: ElementChildren): HTMLInputElement;
export declare function label(props?: string | number | (ElementProps & {
    for?: string;
}), ...children: ElementChildren): HTMLLabelElement;
export declare function a(props?: string | number | (ElementProps & {
    href?: string;
    target?: string;
}), ...children: ElementChildren): HTMLAnchorElement;
export declare function p(...children: ElementChildren): HTMLParagraphElement;
export declare function p(props: ElementProps, ...children: ElementChildren): HTMLParagraphElement;
export declare function span(...children: ElementChildren): HTMLSpanElement;
export declare function span(props: ElementProps, ...children: ElementChildren): HTMLSpanElement;
export declare function pre(...children: ElementChildren): HTMLPreElement;
export declare function pre(props: ElementProps, ...children: ElementChildren): HTMLPreElement;
export declare function form(...children: ElementChildren): HTMLFormElement;
export declare function form(props: ElementProps, ...children: ElementChildren): HTMLFormElement;
export declare function textarea(...children: ElementChildren): HTMLTextAreaElement;
export declare function textarea(props: ElementProps, ...children: ElementChildren): HTMLTextAreaElement;
export declare function select(...children: ElementChildren): HTMLSelectElement;
export declare function select(props: ElementProps, ...children: ElementChildren): HTMLSelectElement;
export declare function option(...children: ElementChildren): HTMLOptionElement;
export declare function option(props: ElementProps, ...children: ElementChildren): HTMLOptionElement;
export declare function section(...children: ElementChildren): HTMLElement;
export declare function section(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function article(...children: ElementChildren): HTMLElement;
export declare function article(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function header(...children: ElementChildren): HTMLElement;
export declare function header(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function footer(...children: ElementChildren): HTMLElement;
export declare function footer(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function nav(...children: ElementChildren): HTMLElement;
export declare function nav(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function main(...children: ElementChildren): HTMLElement;
export declare function main(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function aside(...children: ElementChildren): HTMLElement;
export declare function aside(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function h4(...children: ElementChildren): HTMLHeadingElement;
export declare function h4(props: ElementProps, ...children: ElementChildren): HTMLHeadingElement;
export declare function h5(...children: ElementChildren): HTMLHeadingElement;
export declare function h5(props: ElementProps, ...children: ElementChildren): HTMLHeadingElement;
export declare function h6(...children: ElementChildren): HTMLHeadingElement;
export declare function h6(props: ElementProps, ...children: ElementChildren): HTMLHeadingElement;
export declare function strong(...children: ElementChildren): HTMLElement;
export declare function strong(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function em(...children: ElementChildren): HTMLSpanElement;
export declare function em(props: ElementProps, ...children: ElementChildren): HTMLSpanElement;
export declare function code(...children: ElementChildren): HTMLElement;
export declare function code(props: ElementProps, ...children: ElementChildren): HTMLElement;
export declare function ul(...children: ElementChildren): HTMLUListElement;
export declare function ul(props: ElementProps, ...children: ElementChildren): HTMLUListElement;
export declare function ol(...children: ElementChildren): HTMLOListElement;
export declare function ol(props: ElementProps, ...children: ElementChildren): HTMLOListElement;
export declare function li(...children: ElementChildren): HTMLLIElement;
export declare function li(props: ElementProps, ...children: ElementChildren): HTMLLIElement;
export declare function blockquote(...children: ElementChildren): HTMLQuoteElement;
export declare function blockquote(props: ElementProps, ...children: ElementChildren): HTMLQuoteElement;
export declare function img(...children: ElementChildren): HTMLImageElement;
export declare function img(props: ElementProps, ...children: ElementChildren): HTMLImageElement;
export declare function hr(...children: ElementChildren): HTMLHRElement;
export declare function hr(props: ElementProps, ...children: ElementChildren): HTMLHRElement;
export declare function br(...children: ElementChildren): HTMLBRElement;
export declare function br(props: ElementProps, ...children: ElementChildren): HTMLBRElement;
export declare function render(component: HTMLElement | (() => HTMLElement) | Component<any>, container: HTMLElement): void;
export declare function cleanup(element: HTMLElement): void;
export declare function when<T>(condition: Signal<T> | ReadonlySignal<T> | T, renderFn: () => HTMLElement): HTMLElement;
export declare function map<T>(arraySignal: Signal<T[]> | ReadonlySignal<T[]> | T[], renderFn: (item: T, index: number) => HTMLElement, selector?: (item: T, index: number) => boolean): HTMLElement;
export declare function fragment(...children: ElementChildren): DocumentFragment;
export declare function errorBoundary<P = {}>(Component: Component<P>, options: {
    fallback: (error: Error, errorInfo?: any) => HTMLElement;
    onError?: (error: Error, errorInfo?: any) => void;
}): Component<P>;
export {};
